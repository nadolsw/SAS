#Set Environment Variable to enable SSL for CAS
import os
os.environ["CAS_CLIENT_SSL_CA_LIST"] = "/opt/sas/viya/config/etc/SASSecurityCertificateFramework/cacerts/vault-deployTarget-ca.crt"

#Connect CAS
import swat
conn = swat.CAS('sasserver.demo.sas.com', 5570, '<username>', '<password>')

#Import necessary packages and modules
import os
import sys
import swat
import dlpy
import json
import numpy as np
import pandas as pd
import sklearn as sk

from dlpy import splitting
from swat.cas.table import CASTable
from matplotlib import pyplot as plt
swat.options.cas.print_messages = True

#Print server info to verify connection was successful
conn.session.listSessions()
conn.serverstatus()



#Print an image to verify path is correct and accessible
%pylab inline
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
img=mpimg.imread('/home/sas/images/laying/layingt4.png')
imgplot = plt.imshow(img)
plt.show()



#Set caslib path working directory - NOTE: cannot be a parent or child path of images dir defined below
modelPath='/home/sas/data/'
conn.table.addcaslib(activeonadd=True,datasource={'srctype':'path'},name='SWAT',path=modelPath,subdirectories=True)
conn.setsessopt(caslib='SWAT')  #  Set default active caslib
conn.table.caslibInfo() 
conn.tableinfo()



#Load images - NOTE: cannot be a parent or child path of working caslib dir defined above
imagePath='/home/sas/images/'
my_images = dlpy.images.ImageTable.load_files(conn, path=imagePath,casout=dict(name='my_images',caslib='SWAT'))
conn.tableinfo()

#Show N randomly selected images, freq for each label, and summary of all images
my_images.show(nimages=9, ncol=3, randomize=True)
my_images.label_freq
my_images.image_summary

#Shuffle and resize images
my_images.show(nimages=1, ncol=1, randomize=False, figsize=(8,8)) #Image before resizing
my_images.shuffle(casout=dict(name='my_images', replace=True));
my_images.resize(width=64, height=64)
my_images.show(nimages=1, ncol=1, randomize=False, figsize=(8,8)) #Image after resizing

#Split data into training and test sets
train_imgs, test_imgs = dlpy.splitting.two_way_split(my_images, test_rate=25, stratify_by='_label_', seed = 12345)

#Verify split successful
train_imgs.label_freq
test_imgs.label_freq

#Define model architecture
lenet5 = dlpy.applications.LeNet5(conn, model_table='LENET5', n_classes=6, n_channels=3, width=64, height=64, scale=0.00392156862745098, random_flip='none', random_crop='none', offsets=0)
lenet5.print_summary()
#lenet5.plot_network()

#Fit Model
lenet5.fit(data=train_imgs, 
            valid_table=test_imgs,
            inputs='_image_', 
            target='_label_',
            mini_batch_size=128, 
            max_epochs=10, 
            lr=0.001, 
            gpu=False, 
            log_level=2,
            save_best_weights=True)
#Future sort warning expected - safe to ignore

lenet5.training_history
lenet5.plot_training_history(fig_size=(12,6))


evaluate = lenet5.evaluate(data=test_imgs)
evaluate


lenet5.training_history
lenet5.valid_conf_mat


conn.columninfo('Valid_Res_5S4Z8t')


#Plot Confusion Matrix
labels = ["laying","sitting","standing","walking","walking_downstairs","walking_upstairs"]
cmr = conn.crosstab(table='Valid_Res_5S4Z8t', row='_label_', col='I__label_')
print("Non-Normalized Confusion Matrix")
print(cmr)

confM = cmr.Crosstab[['Col1','Col2','Col3','Col4','Col5','Col6']].values
confMNorm = confM.astype('float') / confM.sum(axis=1)[:, np.newaxis]
print("Normalized Confusion Matrix")
print(confMNorm)

def plot_confusion_matrix(cmnorm, 
                          classes=labels,
                          title='Normalized Confusion Matrix',
                          cmap=plt.cm.Blues):

    fig, ax = plt.subplots()
    fig=plt.figure(figsize=(10,10))
    im = ax.imshow(cmnorm, interpolation='nearest', cmap=cmap)
    ax.figure.colorbar(im, ax=ax).set_label('% Correctly Classified', rotation=90)
    # We want to show all ticks...
    ax.set(xticks=np.arange(cmnorm.shape[1]),
           yticks=np.arange(cmnorm.shape[0]),
           # ... and label them with the respective list entries
           xticklabels=classes, yticklabels=classes,
           title=title,
           ylabel='True label',
           xlabel='Predicted label')

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), rotation=60, ha="right", rotation_mode="anchor")

    # Loop over data dimensions and create text annotations.
    fmt = '.2f'
    thresh = cmnorm.max() / 2.
    for i in range(cmnorm.shape[0]):
        for j in range(cmnorm.shape[1]):
            ax.text(j, i, format(cmnorm[i, j], fmt),
                    ha="center", va="center",
                    color="white" if cmnorm[i, j] > thresh else "black")
    fig.tight_layout()
    return ax

np.set_printoptions(precision=2)
plot_confusion_matrix(confMNorm)
plt.show()  


#Plot Corect Predictions
lenet5.plot_evaluate_res(img_type='C',randomize=True,n_images=3)

#Plot Misclassified Predictions
lenet5.plot_evaluate_res(img_type='M',randomize=True,n_images=3)

#Visualize Heat Map Activation
heatmap = lenet5.heat_map_analysis(data=test_imgs, mask_width=16, mask_height=16, step_size=4, img_type='C', max_display=3)

#Visualize feature maps for each layer of the network
lenet5.get_feature_maps(data=test_imgs, label='sitting', idx=0)
lenet5.feature_maps.display(layer_id=0)
lenet5.feature_maps.display(layer_id=1)
lenet5.feature_maps.display(layer_id=2)
lenet5.feature_maps.display(layer_id=3)
lenet5.feature_maps.display(layer_id=4)


#Extract CNN Features for use with PCA
X, Y = lenet5.get_features(data=test_imgs, dense_layer='pool2')
print(X,Y)

#Plot First Two Principal Components
X_PCA = PCA(n_components=2).fit_transform(X)
plt.figure(figsize=(15, 6))
plt.scatter(X_PCA[Y=='sitting',0], X_PCA[Y=='sitting', 1], marker='^', c='g', label='sitting')
plt.scatter(X_PCA[Y=='laying',0], X_PCA[Y=='laying', 1], marker='o', c='b', label='laying')
plt.legend(bbox_to_anchor=(0.01, 0.99), loc=2, borderaxespad=0.)
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.show()

#Save model as ASTORE
lenet5.deploy(path='/home/sas/output/', output_format='astore')

#Terminate CAS connection
conn.endsession()
