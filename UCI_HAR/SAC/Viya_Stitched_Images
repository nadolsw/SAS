/****************************************/
/* Creates a connection to a CAS server */
/* and specifies a CAS library name.    */
/****************************************/
cas; 
caslib _all_ assign;
libname mycas cas;

/******************************************************/
/* Load the actions we will use in this demonstration */
/******************************************************/
proc cas ;
   loadactionset 'deeplearn';
   loadactionset 'image';
   loadactionset 'table';
run;

/***********************************************************************************************************************/
/* Load the image actionset and create a metadata table. The SmalltrainData folder contains ten sub folders	           */
/* Each folder contains images of a specific image class. The recurse argument will read in all the images from the    */
/* ten directories and the labelLevels argument will label the images according to each subdirectory to keep organized */
/***********************************************************************************************************************/
proc cas;
   table.addCaslib / name='imagelib' path='/home/william.nadolski@sas.com/my_data/UCI HAR Dataset/Images/'
   		subdirectories=true;
  
  image.loadimages / caslib='imagelib' path='Raw Spectrograms'
   		recurse=true labellevels=1
   		casout={name='spectrograms', replace=true};
run; quit;

/***************/
/* View Images */
/***************/
%macro disp_img(dir=/home/william.nadolski@sas.com/my_data/UCI HAR Dataset/Images/Raw Spectrograms, class=, img_suffix=);
	title "Showing Stitched Spectrogram Image: &class.&img_suffix.";
	data _NULL_;
		dcl odsout obj1();
		obj1.image(file:"&dir./&class./&class.&img_suffix.", width: "381", height: "381");
	run;
	title;
%mend disp_img;

/*Select class from: airplane | automobile | bird | cat| deer | dog | frog | horse | ship | truck */
/*Note: Images are not necessarily suffixed from 1-1,000. First ensure image number exists*/

%disp_img(class=laying,img_suffix=t4.png);
%disp_img(class=sitting,img_suffix=t6.png);
%disp_img(class=standing,img_suffix=t0.png);
%disp_img(class=walking,img_suffix=t13.png);
%disp_img(class=walking_downstairs,img_suffix=t1.png);
%disp_img(class=walking_upstairs,img_suffix=t5.png);

/*RESIZE IMAGE to 128x128*/
proc cas;
  image.processimages / 
  		table={name='spectrograms'}
		imageFunctions={{functionOptions={functionType="RESIZE", h="128" w="128"}}}
   		casout={name='spectrograms_reduced', replace=true};
run; quit;

/*Convert from RGB to Grayscale */
/*  proc cas;  			*/
/*    image.processimages /   	*/
/*    		table={name='spectrograms'} */  
/*  		imageFunctions={{functionOptions={functionType="CONVERT_COLOR", type="COLOR2GRAY"}}} */ 
/*     		casout={name='spectrograms_grayscale', replace=true};  */
/*  run; quit;  		*/

/*****************************************************/
/* Use the shuffle action to randomly sort the data. */
/*****************************************************/
proc cas;
	table.shuffle / table='spectrograms_reduced' casout={name='spectrograms_shuffled', replace=1};
run;

/****************************************************************************************************/
/* Use PROC PARTITION to partition each folder of images into train and validation data partitions. */
/****************************************************************************************************/
proc partition data=mycas.spectrograms_shuffled 
        samppct=75    
        samppct2=25 
        seed=12345 
        partind
     ;
     by _label_;
     /*where _id_ <= 1000;*/
     output out=mycas.train_spectrograms;
run;

/******************/
/* Summarize data */
/******************/
proc cas;
	image.summarizeimages / table={name='train_spectrograms', where='_PartInd_=1'};
run;


/****************************/
/* Specify CNN Architecture */
/****************************/

Proc Cas;
	/*****************************/
	/* Build a model shell		 */
	/*****************************/
	BuildModel / modeltable={name='ConVNN', replace=1} type = 'CNN';
	/*****************************/
	/* Add an input layer		 */
	/*****************************/
	AddLayer / model='ConVNN' name='data' layer={type='input' nchannels=3 width=128 height=128}; 
	/****************************/
	/* Add Convolutional layers */
	/****************************/
	AddLayer / model='ConVNN' name='ConVLayer1a' layer={type='CONVO' nFilters=32  width=5 height=5 stride=1 dropout=0.025} srcLayers={'data'};
	AddLayer / model='ConVNN' name='BN1a' layer={type='BATCHNORM' act='RELU'} srcLayers={'ConVLayer1a'};	
	/***************************/
	/* Add a max pooling layer */
	/***************************/
	AddLayer / model='ConVNN' name='PoolLayer1max' layer={type='POOL'  width=2 height=2 stride=2 pool='max'} srcLayers={'BN1a'}; 
	/****************************/
	/* Add Convolutional layers */
	/****************************/
	AddLayer / model='ConVNN' name='ConVLayer2a' layer={type='CONVO' nFilters=64  width=5 height=5 stride=1 dropout=0.025} srcLayers={'PoolLayer1max'};
	AddLayer / model='ConVNN' name='BN2a' layer={type='BATCHNORM' act='RELU'} srcLayers={'ConVLayer2a'};
	/***************************/
	/* Add a max pooling layer */
	/***************************/
	AddLayer / model='ConVNN' name='PoolLayer2max' layer={type='POOL'  width=2 height=2 stride=2 pool='max'} srcLayers={'BN2a'}; 
	/********************************************************/
	/* Add a fully-connected layer with Batch Normalization */
	/********************************************************/
	AddLayer / model='ConVNN' name='FCL' layer={type='FULLCONNECT' n=1000 act='Identity' init='msra2' dropout=0.5 includeBias=False}  srcLayers={'PoolLayer2max'};
	AddLayer / model='ConVNN' name='BN3' layer={type='BATCHNORM' act='RELU'} srcLayers={'FCL'};
	/***********************************************/
	/* Add an output layer with softmax activation */
	/***********************************************/
	AddLayer / model='ConVNN' name='outlayer' layer={type='output' act='SOFTMAX'} srcLayers={'BN3'};
run;

/****************************************/
/* Train the CNN model, ConVNN		*/
/****************************************/

ods trace on;
ods output OptIterHistory=ObjectModeliter;
proc cas;
	dlTrain / table={name='train_spectrograms', where='_PartInd_=1'} model='ConVNN' 
        modelWeights={name='ConVTrainedWeights_d', replace=1}
        bestweights={name='ConVbestweights', replace=1}
        inputs='_image_' 
        target='_label_' nominal={'_label_'}
        GPU=False
        ValidTable={name='train_spectrograms', where='_PartInd_=2'} 
        optimizer={minibatchsize=64,        			
        			algorithm={method='ADAM', lrpolicy='Step', gamma=0.6, stepsize=10
       							beta1=0.9, beta2=0.999, learningrate=.0001}        			
        			maxepochs=100} 
        seed=12345
	;
run;


/********************************************************************/
/*  Store minimum training and validation error in macro variables. */
/********************************************************************/
data ObjectModeliter_accuracy;
	set ObjectModeliter;
	train_accuracy=1-FitError;
	valid_accuracy=1-ValidError;
	format train_accuracy valid_accuracy percent 12.2;
run;

proc sql noprint;
	select min(FitError) into :Train_err separated by ' ' from ObjectModeliter;
	select min(ValidError) into :Valid_err separated by ' ' from ObjectModeliter; 
	
	select max(train_accuracy) into :Train_acc separated by ' ' from ObjectModeliter_accuracy;
	select max(valid_accuracy) into :Valid_acc separated by ' ' from ObjectModeliter_accuracy; 	
quit;

/***********************************/
/*  Plot performance over Epochs   */
/***********************************/
title "Misclassification Error Over Training Epochs";
proc sgplot data=ObjectModeliter;
    yaxis label='Misclassification Rate' MAX=.9 min=0;
	  series x=Epoch y=FitError / CURVELABEL="&Train_err." CURVELABELPOS=END lineattrs=(color=blue);
   	series x=Epoch y=ValidError / CURVELABEL="&Valid_err." CURVELABELPOS=END lineattrs=(color=red); 
   	format FitError ValidError percent12.3;
run;
 
 title "Miscalssification Accuracy Over Training Epochs";
 proc sgplot data=ObjectModeliter_accuracy;
	  yaxis label='Classification Accuracy' MAX=.9 min=0;
	  series x=Epoch y=train_accuracy / CURVELABEL="&Train_acc." CURVELABELPOS=END lineattrs=(color=blue);
   	series x=Epoch y=Valid_accuracy / CURVELABEL="&Valid_acc." CURVELABELPOS=END lineattrs=(color=red); 
 run; title;
