#!/usr/bin/env python
# coding: utf-8

# In[56]:


# -*- coding: utf-8 -*-
"""
Created on Mon Jul 22 21:29:01 2019

@author: winado
"""

import os
import sys
#!{sys.executable} -m pip --default-timeout=100 install --user --proxy=http://proxy:3128 sas-dlpy==1.0.2
os.environ["CAS_CLIENT_SSL_CA_LIST"] = "/opt/sas/viya/config/etc/SASSecurityCertificateFramework/cacerts/vault-deployTarget-ca.crt"

import swat
import dlpy
import json
import numpy as np
import pandas as pd
import sklearn as sk

from dlpy import splitting
from dlpy import applications
#from matplotlib.mlab import PCA
from sklearn import decomposition
from swat.cas.table import CASTable
from matplotlib import pyplot as plt
swat.options.cas.print_messages = True

print(swat.__version__) #Check SWAT version - want 1.5.1
print (dlpy.__version__) #Check DLPy version - want 1.0.2


# In[2]:


import swat
conn = swat.CAS(port=5570)
conn.builtins.about()


# In[3]:


#Print an image to verify path is correct and accessible
get_ipython().run_line_magic('pylab', 'inline')
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
img=mpimg.imread('/home/william.nadolski@sas.com/my_data/UCI HAR Dataset/Images/Raw Spectrograms/laying/layingt1008.png')
imgplot = plt.imshow(img)
plt.show()


# In[4]:


#Set caslib path working directory - NOTE: cannot be a parent or child path of images dir defined below
modelPath='/home/william.nadolski@sas.com/my_data/CASL/'
conn.table.addcaslib(activeonadd=True,datasource={'srctype':'path'},name='SWAT',path=modelPath,subdirectories=True)
conn.setsessopt(caslib='SWAT')  #  Set default active caslib
conn.table.caslibInfo() 
conn.tableinfo()


# In[5]:


imagePath='/home/william.nadolski@sas.com/my_data/UCI HAR Dataset/Images/Raw Spectrograms/'
my_images = dlpy.images.ImageTable.load_files(conn, path=imagePath,casout=dict(name='my_images',caslib='SWAT'))
conn.tableinfo()


# In[6]:


#Show N randomly selected images, freq for each label, and summary of all images
my_images.show(nimages=9, ncol=3, randomize=True)
my_images.label_freq
my_images.image_summary


# In[7]:


#Shuffle and resize images
my_images.show(nimages=1, ncol=1, randomize=False, figsize=(8,8)) #Image before resizing
my_images.shuffle(casout=dict(name='my_images', replace=True));
my_images.resize(width=32, height=32)
my_images.show(nimages=1, ncol=1, randomize=False, figsize=(8,8)) #Image after resizing


# In[9]:


#Split data into training and test sets
train_imgs, test_imgs = dlpy.splitting.two_way_split(my_images, test_rate=25, stratify_by='_label_', seed = 12345)

#Verify split successful
train_imgs.label_freq
test_imgs.label_freq


# In[10]:


#Define model architecture
lenet5 = dlpy.applications.LeNet5(conn, model_table='LENET5', n_classes=6, n_channels=3, width=32, height=32, scale=0.00392156862745098, random_flip='none', random_crop='none', offsets=0)
lenet5.print_summary()
#lenet5.plot_network()


# In[33]:


#Fit Model
lenet5.fit(data=train_imgs, 
            valid_table=test_imgs,
            inputs='_image_', 
            target='_label_',
            mini_batch_size=8, 
            max_epochs=10, 
            lr=0.01, 
            gpu=False, 
            log_level=2,
            save_best_weights=True)

lenet5.training_history
lenet5.plot_training_history(fig_size=(12,6))


# In[34]:


evaluate = lenet5.evaluate(data=test_imgs)
evaluate


# In[35]:


lenet5.training_history
lenet5.valid_conf_mat


# In[36]:


#Plot Confusion Matrix
labels = ["laying","sitting","standing","walking","walking_downstairs","walking_upstairs"]
cmr = conn.crosstab(table='Valid_Res_jCUfME', row='_label_', col='I__label_')
print("Non-Normalized Confusion Matrix")
print(cmr)

confM = cmr.Crosstab[['Col1','Col2','Col3','Col4','Col5','Col6']].values
confMNorm = confM.astype('float') / confM.sum(axis=1)[:, np.newaxis]
print("Normalized Confusion Matrix")
print(confMNorm)

def plot_confusion_matrix(cmnorm, 
                          classes=labels,
                          title='Normalized Confusion Matrix',
                          cmap=plt.cm.Blues):

    fig, ax = plt.subplots()
    fig=plt.figure(figsize=(10,10))
    im = ax.imshow(cmnorm, interpolation='nearest', cmap=cmap)
    ax.figure.colorbar(im, ax=ax).set_label('% Correctly Classified', rotation=90)
    # We want to show all ticks...
    ax.set(xticks=np.arange(cmnorm.shape[1]),
           yticks=np.arange(cmnorm.shape[0]),
           # ... and label them with the respective list entries
           xticklabels=classes, yticklabels=classes,
           title=title,
           ylabel='True label',
           xlabel='Predicted label')

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), rotation=60, ha="right", rotation_mode="anchor")

    # Loop over data dimensions and create text annotations.
    fmt = '.2f'
    thresh = cmnorm.max() / 2.
    for i in range(cmnorm.shape[0]):
        for j in range(cmnorm.shape[1]):
            ax.text(j, i, format(cmnorm[i, j], fmt),
                    ha="center", va="center",
                    color="white" if cmnorm[i, j] > thresh else "black")
    fig.tight_layout()
    return ax

np.set_printoptions(precision=2)
plot_confusion_matrix(confMNorm)
plt.show()  


# In[37]:


#Plot Corect Predictions
lenet5.plot_evaluate_res(img_type='C',randomize=True,n_images=3)


# In[38]:


#Plot Misclassified Predictions
lenet5.plot_evaluate_res(img_type='M',randomize=True,n_images=3)


# In[43]:


#Visualize Heat Map Activation
heatmap = lenet5.heat_map_analysis(data=test_imgs, mask_width=4, mask_height=4, step_size=1, img_type='C', max_display=3)


# In[44]:


#Visualize feature maps for each layer of the network
lenet5.get_feature_maps(data=test_imgs, label='sitting', idx=0)
lenet5.feature_maps.display(layer_id=0)
lenet5.feature_maps.display(layer_id=1)
lenet5.feature_maps.display(layer_id=2)
lenet5.feature_maps.display(layer_id=3)
lenet5.feature_maps.display(layer_id=4)


# In[58]:


#Save model as ASTORE
lenet5.deploy(path='/home/william.nadolski@sas.com/', output_format='astore')


# In[17]:


#Terminate CAS connection
conn.endsession()
